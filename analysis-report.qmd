---
title: "Analysis of Psoriasis scRNA-Seq data from Bennet (Dataset BF_01 + BF_02 + BF_03)"
author: "Maria Schmidt"
affiliation: "IZBI, Interdisciplinary Centre for Bioinformatics, Leipzig University, Germany"
date: "`r Sys.Date()`"
output: 
  html_document:
    toc: true
    number_sections: false
link-citations: true
bibliography: "library.bib"
---

```{r setup, include=FALSE}

knitr::opts_chunk$set(warning = FALSE, message = FALSE)
```

```{r, echo=FALSE, include=FALSE}
pacman::p_load(Seurat, tidyverse, here, ggplot2, pals, patchwork, flextable)
source(here("src","seurat-functions.r"))
source(here("src","make-nicknames-for-celltypes.r"))
source(here("src","liana-functions.r"))
output_data_path <- "output"

filename <- here(output_data_path, "integrated-seurat-obj.RData")
load(filename)
table(obj_integr$predicted.id.Cell_type_nicknames)
# obj_integr$predicted.id.Cell_type_nicknames <- make_nicknames(obj_integr$predicted.id.Cell_type)
table(make_nicknames(obj_integr$predicted.id.Cell_type))

filename <- here(output_data_path, "color-list.RData")
load(filename)  
filename <- here(output_data_path, "bennets-skin-marker.RData")
load(filename)
filename <- here(output_data_path, "predicted.id.Cell_type_nicknames_marker.RData")
load(filename)
filename <- here(output_data_path, "reynolds-skin-marker.RData")
load(filename) 
filename <- here(output_data_path, "interleukins.RData")
load(filename)
filename <- here(output_data_path, "TXLNA-cells-markers.RData")
load(filename)
filename <- here(output_data_path, "IFNL1-cells-markers.RData")
load(filename)
filename <- here(output_data_path, "integrated-liana-obj.RData")
load(filename)

seurat_colors <- scales::hue_pal()(length(table(obj_integr@meta.data[, "seurat_clusters"])))
seurat_cluster_data <- data.frame(
    table(obj_integr@meta.data[, "seurat_clusters"]),
    "color" = seurat_colors
)

celltype_colors <- randomcoloR::distinctColorPalette(length(levels(obj_integr@meta.data[, "predicted.id.Cell_type_nicknames"])))
names(celltype_colors) <- levels(obj_integr@meta.data[, "predicted.id.Cell_type_nicknames"])
celltype_colors[names(color_list[["predicted.id.Cell_type_nicknames"]])] <- color_list[["predicted.id.Cell_type_nicknames"]]
celltype_cluster_data <- data.frame(
    table(obj_integr@meta.data[, "predicted.id.Cell_type_nicknames"])[levels(obj_integr@meta.data[, "predicted.id.Cell_type_nicknames"])],
    "color" = celltype_colors
)
```

# Preprocessing, data integration and dimension reduction

## Quality check

We did quality check of all 3 Samples. We removed cells with high mitochondrial expression (percent.mt) and many counts/genes (nFeature_RNA, nCount_RNA) by thresholding (\> 15% percent.mt, \< median + 3sd nCount/nFeatures ).```

```{r, echo=FALSE,  fig.width = 20, fig.height = 11}
Idents(obj_integr) <- "predicted.id.Cell_type_nicknames"
p1 <- VlnPlot(obj_integr, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), cols = celltype_colors) &
  scale_x_discrete(limits = levels(obj_integr$predicted.id.Cell_type_nicknames))
p2 <- VlnPlot(obj_integr, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), group.by = "seurat_clusters")

p1 / p2
```

```{r, echo=FALSE,  fig.width = 7, fig.height = 5}
VlnPlot(obj_integr, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), group.by = "orig.ident")
FeatureScatter(obj_integr, feature1 = "nCount_RNA", feature2 = "percent.mt", group.by = "orig.ident")
ggplot(obj_integr@meta.data) +
    geom_point(aes(x = nCount_RNA, y = nFeature_RNA, colour = percent.mt)) +
    theme_minimal()
```

```{r, echo=FALSE,  fig.width = 7, fig.height = 7}
ft <- continuous_summary(
  obj_integr@meta.data,
  columns = c("nFeature_RNA", "nCount_RNA", "percent.mt", "percent.rps"),
  by = "orig.ident",
  hide_grouplabel = TRUE
)
ft <-  set_caption(ft, caption = "Statistics of number of counts, features, mitochondrial expression and ribosomal expression")
ft
```

## Data integration and dimension reduction

We integrated the 3 datasets into one, reduced Dimension with PCA and visualized results with UMAP.

```{r, echo=FALSE,  fig.width = 10, fig.height = 5}
p1 <- DimPlot(obj_integr, reduction = "umap", label = FALSE, group.by = "orig.ident") + theme(legend.position="bottom")
p2 <- FeaturePlot(obj_integr, features = "percent.mt")

p1 + p2 
```

## Cell-cycle scoring

We assigned each cell a cell-cycle score, based on its expression of G2/M and S phase markers and predicted classification of each cell in either G2M, S or G1 phase. 

```{r, echo=FALSE,  fig.width = 6, fig.height = 5}

DimPlot(obj_integr, reduction = "umap", label = FALSE, group.by = "Phase")
```

## Unsupervised louvain clustering

To cluster cell in an unsupervised fashion, we applied the Louvain-algorithm implemented in the Seurat package.

```{r, echo=FALSE,  fig.width = 10, fig.height = 5}
p1 <- DimPlot(obj_integr, reduction = "umap", label = TRUE, repel = TRUE, group.by = "seurat_clusters") + theme(legend.position = "none")
p2 <- ggplot(seurat_cluster_data, aes(x = Var1, y = Freq, fill = Var1)) +
  geom_bar(stat = "identity") +
  theme_minimal() +
  scale_fill_manual(values = seurat_cluster_data[, "color"]) +
  coord_flip() +
  theme(
    legend.position = "none",
    axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
  ) +
  xlab("Cluster") +
  ylab("Frequency")

p1 + p2
```

## Celltype classification using a reference dataset

We projected celltypes from a healthy scRNA-Seq dataset (@Reynolds2021) onto our dataset.

```{r, echo=FALSE,  fig.width = 12, fig.height = 6}

Idents(obj_integr) <- "predicted.id.Cell_type_nicknames"

p1 <- DimPlot(obj_integr, reduction = "umap", group.by = "predicted.id.Cell_type_nicknames", cols = celltype_colors) + theme(legend.position = "none", legend.text = element_text(size = 7)) + ggtitle("")

p2 <- ggplot(obj_integr@meta.data, aes(x = predicted.id.Cell_type_nicknames, fill = predicted.id.Cell_type_nicknames)) +
  geom_bar() +
  theme_minimal() +
  scale_fill_manual(values = celltype_colors) +
  scale_x_discrete(limits = levels(obj_integr$predicted.id.Cell_type_nicknames)) +
  coord_flip() +
  theme(
    legend.position = "none",
    axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
  ) +
  xlab("Celltype") +
  ylab("Frequency")

p1 + p2
```

To verify this further, we examined some canonical cell type markers for the specific skin and immune cell populations.

```{r, echo=FALSE, fig.align = "center", fig.height = 10, fig.width = 15 }
DotPlot(obj_integr, features = skin_marker, dot.scale = 6, idents = levels(Idents(obj_integr))) +
  scale_color_gradient2(high = "red", low = "blue") +
  theme(
    axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1, size = 10)
  ) +
  scale_y_discrete(limits = levels(obj_integr$predicted.id.Cell_type_nicknames))
```
We calculated positive markers via differential expression, which further verify and define our predicted clusters.

```{r, echo=FALSE, fig.align = "center", fig.height = 20, fig.width = 20 }
Idents(obj_integr) <- "predicted.id.Cell_type_nicknames"
DefaultAssay(obj_integr) <- "RNA"
cluster_marker_defaultRNA <- FindAllMarkers(obj_integr, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
# save(cluster_marker, file = here(output_data_path, "predicted.id.Cell_type_nicknames_marker.RData"))
top5_predicted.id.Cell_type <- cluster_marker %>%
  group_by(cluster) %>%
  top_n(n = 5, wt = avg_log2FC)
DoHeatmap(obj_integr, features = top5_predicted.id.Cell_type$gene, group.by = "predicted.id.Cell_type_nicknames", group.bar.height = 0.03, group.colors = celltype_colors, hjust = 0) +
  xlab("Celltype") +
  ylab("Top 5 Marker per Cluster") + theme(legend.position = "none") +
  theme(
    axis.text.y = element_text(size = 15),
    axis.title = element_text(size = 30),
    axis.text.x = element_text(size = 25)
  )+
  scale_fill_gradient2(high = "red", low = "blue")
```

## Celltypes per dataset {.tabset}

### BF-LE-01-KT-PSO_all

Number cells: `table(obj_integr$orig.ident)["BF-LE-01-KT-PSO_all"]`

```{r, echo=FALSE, fig.width = 10, fig.height = 5}
Idents(obj_integr) <- "orig.ident"

plotting_subset <- function(my_ident = my_ident, seurat_object = obj_integr, celltype_cluster_data = celltype_cluster_data){
  
  Idents(obj_integr) <- "orig.ident"
  my_subset <- subset(obj_integr, idents=my_ident)
  Idents(my_subset) <- "predicted.id.Cell_type_nicknames"
  celltype_cluster_data_subset <- data.frame(
    table(my_subset@meta.data[, "predicted.id.Cell_type_nicknames"]),
    "color" = celltype_colors[names(table(my_subset@meta.data[, "predicted.id.Cell_type_nicknames"]))]
  )
  
  p1 <- DimPlot(my_subset, reduction = "umap", group.by = "predicted.id.Cell_type_nicknames", cols = celltype_colors) + theme(legend.position = "none", legend.text = element_text(size = 7)) + ggtitle("")
  
  p2 <- ggplot(celltype_cluster_data_subset, aes(x = Var1, y = Freq, fill = Var1)) +
    geom_bar(stat = "identity") +
    theme_minimal() +
    scale_fill_manual(values = celltype_cluster_data_subset$color) +
    coord_flip() +
    theme(
      legend.position = "none",
      axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
    ) +
    xlab("Celltype") +
    ylab("Frequency")
  
  p1 + p2
}
plotting_subset(my_ident = unique(Idents(obj_integr))[1], seurat_object = obj_integr, celltype_cluster_data = celltype_cluster_data)
```

### BF-LE-02-PG-PSO_all

Number cells: `table(obj_integr$orig.ident)["BF-LE-02-PG-PSO_all"]`

```{r, echo=FALSE, fig.width = 10, fig.height = 5}

plotting_subset(my_ident = unique(Idents(obj_integr))[2], seurat_object = obj_integr, celltype_cluster_data = celltype_cluster_data)

```

### BF_LE_03_VC_03_all

Number cells: `table(obj_integr$orig.ident)["BF_LE_03_VC_03_al"]`

```{r, echo=FALSE, fig.width = 10, fig.height = 5}

plotting_subset(my_ident = unique(Idents(obj_integr))[3], seurat_object = obj_integr, celltype_cluster_data = celltype_cluster_data)

```

# Interleukine (IL) expression

## All differentilly expressed ILs

```{r echo=FALSE, fig.align="center", fig.height=9, fig.width=15}
interleukins <- intersect(interleukins, rownames(obj_integr))
interleukins <- unique(c(interleukins, rownames(obj_integr)[grep("^IL", rownames(obj_integr))]))
interleukins.diffexpr <- unique(cluster_marker$gene[which(cluster_marker$gene %in% interleukins)])

DotPlot(obj_integr, features = interleukins.diffexpr, group.by = "predicted.id.Cell_type_nicknames", dot.scale = 5) +
  scale_color_gradient2(high = "red", low = "blue") +
  theme(
    axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1, size = 13),
    axis.text.y = element_text(size = 13)
  )
```

## All differentilly expressed ILs in inflammatory celltypes

```{r, echo=FALSE, fig.align = "center", fig.height = 5, fig.width = 12 }
#  (also die DC- und die T-Fraktion, dann gerne Th1/Th2-aufgeschlüsselt, Makrophagen, Monocyten, Plasmazellen, Mastzellen)
dendritic <- grep("DC", unique(obj_integr$predicted.id.Cell_type_nicknames), value = TRUE)
tcells <- c("Tc", "Th", "Treg")
macrophages <- grep("Mac", unique(obj_integr$predicted.id.Cell_type_nicknames), value = TRUE)
langerhans <- grep("LC", unique(obj_integr$predicted.id.Cell_type_nicknames), value = TRUE)
inflammatory <- sort(c(dendritic, tcells, macrophages, langerhans, "Mast cell", "Monocyte", "Plasma cell" ))


interleukins_inflammatory_diffexpr <- unique(cluster_marker$gene[which(cluster_marker$gene %in% interleukins & cluster_marker$cluster %in% inflammatory)])

Idents(obj_integr) <- "predicted.id.Cell_type_nicknames"

DotPlot(obj_integr, features = interleukins_inflammatory_diffexpr, group.by = "predicted.id.Cell_type_nicknames", dot.scale = 5, idents = inflammatory) +
  scale_color_gradient2(high = "red", low = "blue") +
  theme(
        axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1, size = 13),
    axis.text.y = element_text(size = 13)

  )
```


## All expressed ILs

```{r, echo=FALSE, fig.align = "center", fig.height = 8, fig.width = 20 }

DotPlot(obj_integr, features = interleukins, group.by = "predicted.id.Cell_type_nicknames", dot.scale = 6) +
  scale_color_gradient2(high = "red", low = "blue") +
  theme(
    axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1, size = 12),
    axis.text.y = element_text(size = 20)
  )
```

## All expressed ILs in inflammatory celltypes

```{r, echo=FALSE, fig.align = "center", fig.height = 6, fig.width = 20 }

DotPlot(obj_integr, features = interleukins, group.by = "predicted.id.Cell_type_nicknames", dot.scale = 6, idents = inflammatory) +
  scale_color_gradient2(high = "red", low = "blue") +
  theme(
    axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1, size = 12),
    axis.text.y = element_text(size = 20)
  )
```

## Selected ILs/Features

```{r, echo=FALSE, fig.align = "center",  fig.height = 50, fig.width = 12 }
genes.bennet <- intersect(c(rownames(obj_integr)[grep("IL17", rownames(obj_integr))], "TNF", "TNFRSF1A", "IL22", rownames(obj_integr)[grep("IL12", rownames(obj_integr))], "IL23R", "IL23A", "NOS1", "NOS2", "IL13", "IL13RA1"), rownames(obj_integr))
Idents(obj_integr) <- "predicted.id.Cell_type_nicknames"
FeaturePlot(
  obj_integr, 
  features = genes.bennet,
  ncol = 2,
  order = TRUE, 
  label = TRUE, 
  repel = TRUE, 
  min.cutoff = "q1",
  max.cutoff = "q99"
  )
```

```{r, echo=FALSE, fig.align = "center", fig.height = 7, fig.width = 10}
DotPlot(obj_integr, features = genes.bennet, group.by = "predicted.id.Cell_type_nicknames", dot.scale = 4) +
  scale_color_gradient2(high = "red", low = "blue") +
  theme(
    axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1, size = 12)
  )

```

## Selected ILs/Features in inflammatory celltypes

```{r, echo=FALSE, fig.align = "center",  fig.height = 5, fig.width = 12 }
DotPlot(obj_integr, features = genes.bennet, group.by = "predicted.id.Cell_type_nicknames", dot.scale = 4, idents = inflammatory) +
  scale_color_gradient2(high = "red", low = "blue") +
  theme(
    axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1, size = 14)
  )

```

# Interesting interferons (IFNs)

## Interferone (alpha, beta, gamma), TNF-alpha, TGFalpha

```{r, echo=FALSE, fig.align = "center", fig.height = 8, fig.width = 6 }
DotPlot(obj_integr, features = c("TNF", "LTA",  "TGFA", "TGFB1"), group.by = "predicted.id.Cell_type_nicknames", dot.scale = 6) +
  scale_color_gradient2(high = "red", low = "blue") +
  theme(
    axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)
  )
```

```{r, echo=FALSE, fig.align = "center", fig.height = 8, fig.width = 11 }
FeaturePlot(
  obj_integr, 
  features = c("TNF", "LTA",  "TGFA", "TGFB1"),
  ncol = 2,
  order = TRUE, 
  label = TRUE, 
  repel = TRUE, 
  min.cutoff = "q1",
  max.cutoff = "q99"
  )

```

## All TNFs and TGFs

```{r, echo=FALSE, fig.align = "center", fig.height = 8, fig.width = 15}
interferons <- c(rownames(obj_integr)[grep("^TNF", rownames(obj_integr))], rownames(obj_integr)[grep("^TGF", rownames(obj_integr))])

DotPlot(obj_integr, features = interferons, group.by = "predicted.id.Cell_type_nicknames", dot.scale = 6) +
  scale_color_gradient2(high = "red", low = "blue") +
  theme(
    axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)
  )
```


# S100A1 proteins

```{r, echo=FALSE, fig.align = "center", fig.height = 7, fig.width = 10 }
DotPlot(obj_integr, features = rownames(obj_integr)[grep("S100A1", rownames(obj_integr))], group.by = "predicted.id.Cell_type_nicknames", dot.scale = 6) +
  scale_color_gradient2(high = "red", low = "blue") +
  theme(
    axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)
  )
```

# *IL-14 (TXLNA)* and *IL-29 (IFNL1)*

## Which cells express *IL-14 (TXLNA)* and *IL-29 (IFNL1)*?

```{r, echo=FALSE, fig.align = "center", fig.height = 5, fig.width = 10 }
genes.bennet <- c("TXLNA", "IFNL1")
Idents(obj_integr) <- "predicted.id.Cell_type_nicknames"

                        FeaturePlot(
                            obj_integr, 
                            features = genes.bennet, 
                            order = TRUE, 
                            label = TRUE, 
                            repel = TRUE, 
                            min.cutoff = "q1", 
                            max.cutoff = "q99"
                        ) 
```

```{r, echo=FALSE, fig.align = "center", fig.height = 5, fig.width = 8 }
DotPlot(obj_integr, features = genes.bennet, group.by = "predicted.id.Cell_type_nicknames", dot.scale = 4) +
  scale_color_gradient2(high = "red", low = "blue") +
  theme(
    axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1, size = 10)
  )

```

## Marker of *TXLNA*-UP and *IFNL1*-UP cells {.tabset}

### *TXLNA*-UP cells

```{r, echo=FALSE, fig.align = "center", fig.height = 12, fig.width = 10}
TXLNA_UP <- mean(GetAssayData(object = obj_integr, slot = "data")["TXLNA",])
sd_TXLNA_UP <- sd(GetAssayData(object = obj_integr, slot = "data")["TXLNA",])
obj_TXLNA <- subset(x = obj_integr, subset = TXLNA > (TXLNA_UP+sd_TXLNA_UP))
number_TXLNA_up <- ncol(obj_TXLNA)
```

Number *TXLNA*-UP cells: `r number_TXLNA_up`

```{r, echo=FALSE, fig.align = "center", fig.height = 12, fig.width = 10}
# obj_integr$TXLNA_expr <- "-"
# obj_integr$TXLNA_expr[ colnames(obj_TXLNA)] <- "up"
# Idents(obj_integr) <- "TXLNA_expr"
# TXLNA_cells_markers <- FindMarkers(object = obj_integr, ident.1 = "up")
# save(TXLNA_cells_markers, file = here(output_data_path,"TXLNA-cells-markers.RData"))

head(TXLNA_cells_markers, 10)

TXLNA_coexpr <- head(rownames(TXLNA_cells_markers), 7)[-1]
FeaturePlot(
    obj_integr,
    features = TXLNA_coexpr,
    order = TRUE,
    label = TRUE,
    repel = TRUE,
    min.cutoff = "q1",
    max.cutoff = "q99"
)
```

### *IFNL1*-UP cells

```{r, echo=FALSE, fig.align = "center", fig.height = 12, fig.width = 10}
IFNL1_UP <- mean(GetAssayData(object = obj_integr, slot = "data")["IFNL1",])
sd_IFNL1_UP <- sd(GetAssayData(object = obj_integr, slot = "data")["IFNL1",])
obj_IFNL1 <- subset(x = obj_integr, subset = IFNL1 > (IFNL1_UP+sd_IFNL1_UP))
number_IFNL1_up <- ncol(obj_IFNL1)
```

Number *IFNL1*-UP cells: `r number_IFNL1_up`

```{r, echo=FALSE, fig.align = "center", fig.height = 12, fig.width = 10 }
# obj_integr$IFNL1_expr <- "-"
# obj_integr$IFNL1_expr[ colnames(obj_IFNL1)] <- "up"
# Idents(obj_integr) <- "IFNL1_expr"
# IFNL1_cells_markers <- FindMarkers(object = obj_integr, ident.1 = "up")
# save(IFNL1_cells_markers, file = here(output_data_path,"IFNL1-cells-markers.RData"))
head(IFNL1_cells_markers, 10)
IFNL1_coexpr <- head(rownames(IFNL1_cells_markers), 7)[-1]

FeaturePlot(
    obj_integr,
    features = IFNL1_coexpr,
    order = TRUE,
    label = TRUE,
    repel = TRUE,
    min.cutoff = "q1",
    max.cutoff = "q99"
)

```

# Annotation of Th1 and Th2 subpopulations {.tabset}

```{r, echo=FALSE, fig.align = "center", fig.height = 6, fig.width = 10}
th_cells <- colnames(obj_integr)[which(obj_integr$predicted.id.Cell_type_nicknames %in% c("Th", "Tc", "Treg"))]
tcells_obj <- subset(obj_integr, cells = th_cells)

p1 <- DimPlot(tcells_obj, group.by = "predicted.id.Cell_type_nicknames") +
  ggtitle("Celltypes")
p2 <-DimPlot(tcells_obj, group.by = "seurat_clusters")+
  ggtitle("Seurat clusters")
p3 <-FeaturePlot(
  tcells_obj,
  features = 'percent.mt') +
  ggtitle("Mitochondrial expression")

pw <- p1 + p2 
pw + plot_annotation(
  title = 'T-cells UMAP subset',
  subtitle = 'Subset of the dataset with only Tc, Th and Treg'
)  
```

## Th1-marker

https://www.rndsystems.com/resources/cell-markers/immune-cells/helper-t-cells/th1-cell-markers

```{r, echo=FALSE, fig.align = "center", fig.height = 20, fig.width = 10}
th1_marker <- intersect(c("STAT1", "STAT2", "IFNG", "IL2", "TNF", "CCR1", "CCR5", "CXCR3", "IL12RB2", "IL18R1"), rownames(obj_integr))
FeaturePlot(
  tcells_obj,
  features = th1_marker,
  ncol = 2,
  order = TRUE
)
```

## Th2-marker

https://www.rndsystems.com/resources/cell-markers/immune-cells/helper-t-cells/th2-cell-markers

```{r, echo=FALSE, fig.align = "center", fig.height = 30, fig.width = 10}
th2_marker <- intersect(c("IL4", "IL5", "IL9", "IL10", "IL13", "IL21", "GATA3", "IRF4", "STAT5A", "STAT5B","STAT6", "CCR3", "CCR4", "CCR8", "CXCR4", "IL17RB", "IL4R", "IL33", "TSLP"), rownames(obj_integr))
FeaturePlot(
  tcells_obj, 
  features = th2_marker,
  ncol = 2,
  order = TRUE
  )

```

# Geneset Expression of GS th1-marker and th2-marker

```{r, echo=FALSE, fig.align = "center", fig.height=5, fig.width = 10}
th1_marker_list <- list(th1_marker)
tcells_obj <- AddModuleScore(
  object = tcells_obj,
  features = th1_marker_list,
  ctrl = 5,
  name = 'th1_marker'
)

th2_marker_list <- list(th2_marker)
tcells_obj <- AddModuleScore(
  object = tcells_obj,
  features = th2_marker_list,
  ctrl = 5,
  name = 'th2_marker'
)

pw <- FeaturePlot(
  tcells_obj,
  features = c('th1_marker1', 'th2_marker1'),
  ncol = 2,
  order = TRUE, 
  min.cutoff = "q1",
  max.cutoff = "q99"
  )

pw
```

# Receptor-Ligand Analysis (R-package LIANA, @Dimitrov2021)

## Lymphocytes \<-\> Lymphocytes

```{r, echo=FALSE, fig.align = "center", fig.height = 15, fig.width = 20 }
lymphocytes <- c(tcells, "Plasma cell")

liana_subset <- liana_obj  %>%
  filter(aggregate_rank < 0.05 ) 

  if(nrow(liana_subset) > 0){
  		my_liana_dotplot2(liana_subset, source_groups = lymphocytes,
  					target_groups = lymphocytes)  %>%
  		print()
  }

```

## Keratinocytes -\> Lymphocytes

```{r, echo=FALSE, fig.align = "center", fig.height = 9, fig.width = 20 }
keratinocytes <- c("KC premit", "KC_postmit", "KC_mit")

liana_subset <- liana_obj  %>%
  filter(aggregate_rank < 0.05 )
  if(nrow(liana_subset) > 0){
  		my_liana_dotplot2(liana_subset, source_groups = keratinocytes,
  					target_groups = lymphocytes)  %>%
  		print()
  }

```

## Lymphocytes -\> Keratinocytes

```{r, echo=FALSE, fig.align = "center", fig.height = 10, fig.width = 16 }
liana_subset <- liana_obj  %>%
  filter(aggregate_rank < 0.05 )
  if(nrow(liana_subset) > 0){
  		my_liana_dotplot2(liana_subset, source_groups = lymphocytes,
  					target_groups = keratinocytes)  %>%
  		print()
  }

```


## T cells -\> Dendritic cells

```{r, echo=FALSE, fig.align = "center", fig.height = 10, fig.width = 16 }
liana_subset <- liana_obj  %>%
  filter(aggregate_rank < 0.05 )
  if(nrow(liana_subset) > 0){
  		my_liana_dotplot2(liana_subset, source_groups = tcells,
  					target_groups = dendritic)  %>%
  		print()
  }

```

## T cells -\> Langerhans cells

```{r, echo=FALSE, fig.align = "center", fig.height = 8, fig.width = 8 }
liana_subset <- liana_obj  %>%
  filter(aggregate_rank < 0.05 )
  if(nrow(liana_subset) > 0){
  		my_liana_dotplot2(liana_subset, source_groups = tcells,
  					target_groups = langerhans)  %>%
  		print()
  }

```


# References

